// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum VoteType {
  UP
  DOWN
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  createdSubreddits Subreddit[]   @relation("CreatedBy")
  subscriptions UserSubscription[]
  votes         PostVote[]
  username      String?       @unique
  image         String?
  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  Comment       Comment[]
  CommentVote   CommentVote[]
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  user              User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model Subreddit {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  posts       Post[]
  creatorId   String?       @db.ObjectId
  Creator     User?         @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers UserSubscription[]
}

model UserSubscription {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String   @db.ObjectId

  @@unique([userId, subredditId])
}

model Post {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  author      User          @relation(fields: [authorId], references: [id])
  authorId    String        @db.ObjectId
  subreddit   Subreddit     @relation(fields: [subredditId], references: [id])
  subredditId String        @db.ObjectId
  comments    Comment[]
  votes       PostVote[]
}

model PostVote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
  type      VoteType

  @@unique([userId, postId])
}

model Comment {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  text        String
  createdAt   DateTime      @default(now())
  author      User          @relation(fields: [authorId], references: [id])
  authorId    String        @db.ObjectId
  post        Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String        @db.ObjectId
  replyToId   String?       @db.ObjectId
  replyTo     Comment?      @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies     Comment[]     @relation("ReplyTo")
  votes       CommentVote[]
  commentId   String?       @db.ObjectId
}

model CommentVote {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  comment    Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId  String   @db.ObjectId
  type       VoteType

  @@unique([userId, commentId])
}